// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: front_user.proto

/*
Package user_srv is a generated protocol buffer package.

option go_package = ".;user_srv";

It is generated from these files:
	front_user.proto

It has these top-level messages:
	FrontUserRequest
	FrontUserMailRequest
	FrontUserRespond
*/
package user_srv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FrontUser service

type FrontUserService interface {
	FrontUserRegister(ctx context.Context, in *FrontUserRequest, opts ...client.CallOption) (*FrontUserRespond, error)
	FrontUserSendEmail(ctx context.Context, in *FrontUserMailRequest, opts ...client.CallOption) (*FrontUserRespond, error)
	FrontUserLogin(ctx context.Context, in *FrontUserRequest, opts ...client.CallOption) (*FrontUserRespond, error)
}

type frontUserService struct {
	c    client.Client
	name string
}

func NewFrontUserService(name string, c client.Client) FrontUserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "user_srv"
	}
	return &frontUserService{
		c:    c,
		name: name,
	}
}

func (c *frontUserService) FrontUserRegister(ctx context.Context, in *FrontUserRequest, opts ...client.CallOption) (*FrontUserRespond, error) {
	req := c.c.NewRequest(c.name, "FrontUser.FrontUserRegister", in)
	out := new(FrontUserRespond)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontUserService) FrontUserSendEmail(ctx context.Context, in *FrontUserMailRequest, opts ...client.CallOption) (*FrontUserRespond, error) {
	req := c.c.NewRequest(c.name, "FrontUser.FrontUserSendEmail", in)
	out := new(FrontUserRespond)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontUserService) FrontUserLogin(ctx context.Context, in *FrontUserRequest, opts ...client.CallOption) (*FrontUserRespond, error) {
	req := c.c.NewRequest(c.name, "FrontUser.FrontUserLogin", in)
	out := new(FrontUserRespond)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FrontUser service

type FrontUserHandler interface {
	FrontUserRegister(context.Context, *FrontUserRequest, *FrontUserRespond) error
	FrontUserSendEmail(context.Context, *FrontUserMailRequest, *FrontUserRespond) error
	FrontUserLogin(context.Context, *FrontUserRequest, *FrontUserRespond) error
}

func RegisterFrontUserHandler(s server.Server, hdlr FrontUserHandler, opts ...server.HandlerOption) error {
	type frontUser interface {
		FrontUserRegister(ctx context.Context, in *FrontUserRequest, out *FrontUserRespond) error
		FrontUserSendEmail(ctx context.Context, in *FrontUserMailRequest, out *FrontUserRespond) error
		FrontUserLogin(ctx context.Context, in *FrontUserRequest, out *FrontUserRespond) error
	}
	type FrontUser struct {
		frontUser
	}
	h := &frontUserHandler{hdlr}
	return s.Handle(s.NewHandler(&FrontUser{h}, opts...))
}

type frontUserHandler struct {
	FrontUserHandler
}

func (h *frontUserHandler) FrontUserRegister(ctx context.Context, in *FrontUserRequest, out *FrontUserRespond) error {
	return h.FrontUserHandler.FrontUserRegister(ctx, in, out)
}

func (h *frontUserHandler) FrontUserSendEmail(ctx context.Context, in *FrontUserMailRequest, out *FrontUserRespond) error {
	return h.FrontUserHandler.FrontUserSendEmail(ctx, in, out)
}

func (h *frontUserHandler) FrontUserLogin(ctx context.Context, in *FrontUserRequest, out *FrontUserRespond) error {
	return h.FrontUserHandler.FrontUserLogin(ctx, in, out)
}
